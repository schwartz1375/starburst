#!/usr/bin/env python3

__author__ = 'Matthew Schwartz (@schwartz1375)'

import json
import sqlite3
import sys

def get_techniques_for_malware(malware_name):
    conn = sqlite3.connect('sqlite_mitre-attack_13.1.db')
    cursor = conn.cursor()

    # Get malware ID
    cursor.execute("SELECT id FROM malware WHERE name LIKE ?", (malware_name,))
    malware_id = cursor.fetchone()

    if not malware_id:
        return None, None

    malware_id = malware_id[0]

    # Get related attack patterns
    cursor.execute(
        "SELECT target_ref FROM relationship WHERE source_ref=?", (malware_id,))
    attack_pattern_ids = [row[0] for row in cursor.fetchall()]
    cursor.execute("SELECT description, x_mitre_platforms, id, external_references FROM attack_pattern WHERE id IN ({})".format(
        ','.join('?' * len(attack_pattern_ids))), attack_pattern_ids)
    results = cursor.fetchall()
    cursor.execute("SELECT description FROM malware WHERE name LIKE ?", (f'%{malware_name}%',))
    malware_info = cursor.fetchone()

    # Get attack pattern details
    techniques = []
    for result in results:
        description, platforms, technique_id, external_references = result
        external_id = ""
        if external_references:
            external_references = json.loads(external_references)
            if external_references and len(external_references) > 0:
                external_id = external_references[0].get('external_id', "")
        techniques.append({
            # Extract technique ID from STIX ID
            "techniqueID": technique_id.split('--')[1],
            "externalID": external_id,
            "name": malware_name,
            "description": description,
            "platforms": json.loads(platforms)  # Convert JSON string to list
        })

    return techniques, malware_info


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python malware_technique_mapper.py <malware_name>")
        sys.exit(1)

    malware_name = sys.argv[1]

    techniques, malware_info = get_techniques_for_malware(malware_name)

    if techniques is None:
        print(f"No malware found with name {malware_name}.")
        sys.exit(1)
    elif malware_info is None:
        print(f"No malware information found for {malware_name}.")
        sys.exit(1)
    else:
        # Output in ATT&CK Navigator Layer format
        output = {
            "name": f"{malware_name} techniques",
            "description": f"ATT&CK techniques used by {malware_name}",
            "Malware description": f"{malware_info}",
            "domain": "mitre-enterprise",
            "version": "4.2",
            #"techniques": [{"techniqueID": t["techniqueID"], "externalID": t["externalID"], "score": 1} for t in techniques],
            #"gradient": {
            #    "colors": ["#ffffff", "#66ff66"],
            #    "minValue": 0,
            #    "maxValue": 1
            #},
            "metadata": techniques
        }

        with open(f"{malware_name}_layer.json", "w") as f:
            json.dump(output, f, indent=2)

        print(f"Generated {malware_name}_layer.json successfully.")
